#!/bin/bash -e

function install_boost_dependencies() {
  installdir="$1"
}

function install_boost() {
  version="$1"
  installdir="$2"
  setup_file="${installdir}/setup.sh"
  version_underscores="$(echo "${version}" | sed 's/\./_/g')"
  srcdir="$(pwd)/boost_${version_underscores}"
  tarball="boost_${version_underscores}.tar.gz"
  download_url="http://sourceforge.net/projects/boost/files/boost/${version}/${tarball}"

  install_boost_dependencies "${installdir}"

  debug__ "version=${version}"
  debug__ "installdir=${installdir}"
  debug__ "setup_file=${setup_file}"
  debug__ "srcdir=${srcdir}"
  debug__ "tarball=${tarball}"
  debug__ "download_url=${download_url}"
 
  #-------------------------------------------------------------------------------
  # Download and unpack
  #-------------------------------------------------------------------------------
  if [ ! -f "$tarball" ]; then
      echo "[INFO] Downloading Boost '$download_url'"
      wget --verbose "$download_url" || exit 1
  else
      echo "[INFO] [SKIP] Boost tarball already exists: '$tarball'"
  fi
  
  if [ ! -d "$srcdir" ]; then
      echo "[INFO] Unpacking Boost tarball: '$tarball'"
      tar xzvf "${tarball}"
  else
      echo "[INFO] [SKIP] Boost source code already exists: '$srcdir'"
  fi
  
  #-------------------------------------------------------------------------------
  # Build and install
  #-------------------------------------------------------------------------------
  cd "${srcdir}"
  
  if [ ! -e "${installdir}/include" -o ! -e "${installdir}/lib" ]; then
      echo "[INFO] Configuring Boost"
      echo "[INFO] Installing to '$installdir'"
      ./bootstrap.sh --prefix="${installdir}"

      BOOST_BUILD_CMD=
      if [ -e "${srcdir}/bjam" ]; then
          BOOST_BUILD_CMD="bjam"
      elif [ -e "${srcdir}/b2" ]; then
          BOOST_BUILD_CMD="b2"
      else
        echo "[FATAL] boost build script not found (bjam/b2). Aborting..."
        exit 1
      fi

      "./${BOOST_BUILD_CMD}" install -sNO_COMPRESSION=1 --prefix="${installdir}" -j "${INSTALL_LOCAL_PARALLELISM}"
  fi
  
      echo "[INFO] Creating Boost environment setup file ${setup_file}"
      cat > "${setup_file}" <<-EOF
#!/bin/bash
#
# Automatically generated by $0 on $(date)

export BOOST_VERSION="${version}"
export BOOST_HOME="${installdir}"
export PATH="\${BOOST_HOME}/bin:\${PATH}"
export LD_LIBRARY_PATH="\${BOOST_HOME}/lib:\${LD_LIBRARY_PATH}"
EOF
}

